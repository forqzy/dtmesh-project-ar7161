.TH "Memory Utility Routines" 3 "23 Mar 2006" "Version 5.1.3" "net-snmp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Memory Utility Routines \- 
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSNMP_MAXPATH\fP   1024"
.br
.ti -1c
.RI "#define \fBSNMP_MAXBUF\fP   (1024 * 4)"
.br
.ti -1c
.RI "#define \fBSNMP_MAXBUF_MEDIUM\fP   1024"
.br
.ti -1c
.RI "#define \fBSNMP_MAXBUF_SMALL\fP   512"
.br
.ti -1c
.RI "#define \fBSNMP_MAXBUF_MESSAGE\fP   1500"
.br
.ti -1c
.RI "#define \fBSNMP_MAXOID\fP   64"
.br
.ti -1c
.RI "#define \fBSNMP_MAX_CMDLINE_OIDS\fP   128"
.br
.ti -1c
.RI "#define \fBSNMP_FILEMODE_CLOSED\fP   0600"
.br
.ti -1c
.RI "#define \fBSNMP_FILEMODE_OPEN\fP   0644"
.br
.ti -1c
.RI "#define \fBBYTESIZE\fP(bitsize)   ((bitsize + 7) >> 3)"
.br
.ti -1c
.RI "#define \fBROUNDUP8\fP(x)   ( ( (x+7) >> 3 ) * 8 )"
.br
.ti -1c
.RI "#define \fBSNMP_FREE\fP(s)   if (s) { free((void *)s); s=NULL; }"
.br
.RI "\fIFrees a pointer only if it is !NULL and sets its value to NULL. \fP"
.ti -1c
.RI "#define \fBSNMP_MALLOC_STRUCT\fP(s)   (struct s *) calloc(1, sizeof(struct s))"
.br
.RI "\fIMallocs memory of sizeof(struct s), zeros it and returns a pointer to it. \fP"
.ti -1c
.RI "#define \fBSNMP_MALLOC_TYPEDEF\fP(td)   (td *) calloc(1, sizeof(td))"
.br
.RI "\fIMallocs memory of sizeof(t), zeros it and returns a pointer to it. \fP"
.ti -1c
.RI "#define \fBSNMP_ZERO\fP(s, l)   if (s) memset(s, 0, l);"
.br
.ti -1c
.RI "#define \fBTOUPPER\fP(c)   (c >= 'a' && c <= 'z' ? c - ('a' - 'A') : c)"
.br
.ti -1c
.RI "#define \fBTOLOWER\fP(c)   (c >= 'A' && c <= 'Z' ? c + ('a' - 'A') : c)"
.br
.ti -1c
.RI "#define \fBHEX2VAL\fP(s)   ((isalpha(s) ? (TOLOWER(s)-'a'+10) : (TOLOWER(s)-'0')) & 0xf)"
.br
.ti -1c
.RI "#define \fBVAL2HEX\fP(s)   ( (s) + (((s) >= 10) ? ('a'-10) : '0') )"
.br
.ti -1c
.RI "#define \fBSNMP_MAX\fP(a, b)   ((a) > (b) ? (a) : (b))"
.br
.RI "\fIComputers the maximum of a and b. \fP"
.ti -1c
.RI "#define \fBSNMP_MIN\fP(a, b)   ((a) > (b) ? (b) : (a))"
.br
.RI "\fIComputers the minimum of a and b. \fP"
.ti -1c
.RI "#define \fBFALSE\fP   0"
.br
.ti -1c
.RI "#define \fBTRUE\fP   1"
.br
.ti -1c
.RI "#define \fBQUITFUN\fP(e, l)"
.br
.ti -1c
.RI "#define \fBDIFFTIMEVAL\fP(now, then, diff)"
.br
.ti -1c
.RI "#define \fBUSM_LENGTH_OID_TRANSFORM\fP   10"
.br
.ti -1c
.RI "#define \fBISTRANSFORM\fP(ttype, toid)"
.br
.ti -1c
.RI "#define \fBENGINETIME_MAX\fP   2147483647"
.br
.ti -1c
.RI "#define \fBENGINEBOOT_MAX\fP   2147483647"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void * \fBmarker_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsnmp_realloc\fP (u_char **buf, size_t *buf_len)"
.br
.RI "\fIThis function increase the size of the buffer pointed at by *buf, which is initially of size *buf_len. \fP"
.ti -1c
.RI "void \fBfree_zero\fP (void *buf, size_t size)"
.br
.RI "\fIzeros memory before freeing it. \fP"
.ti -1c
.RI "u_char * \fBmalloc_random\fP (size_t *size)"
.br
.RI "\fIReturns pointer to allocaed & set buffer on success, size contains number of random bytes filled. \fP"
.ti -1c
.RI "u_char * \fBmalloc_zero\fP (size_t size)"
.br
.ti -1c
.RI "int \fBmemdup\fP (u_char **to, const u_char *from, size_t size)"
.br
.RI "\fIDuplicates a memory block. \fP"
.ti -1c
.RI "u_int \fBbinary_to_hex\fP (const u_char *input, size_t len, char **output)"
.br
.RI "\fIconverts binary to hexidecimal \fP"
.ti -1c
.RI "int \fBhex_to_binary2\fP (const u_char *input, size_t len, char **output)"
.br
.RI "\fIhex_to_binary2 \fP"
.ti -1c
.RI "int \fBsnmp_decimal_to_binary\fP (u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const char *decimal)"
.br
.ti -1c
.RI "int \fBsnmp_hex_to_binary\fP (u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const char *hex)"
.br
.ti -1c
.RI "int \fBsnmp_strcat\fP (u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const u_char *s)"
.br
.ti -1c
.RI "char * \fBnetsnmp_strdup_and_null\fP (const u_char *from, size_t from_len)"
.br
.RI "\fIcopies a (possible) unterminated string of a given length into a new buffer and null terminates it as well (new buffer MAY be one byte longer to account for this \fP"
.ti -1c
.RI "void \fBdump_chunk\fP (const char *debugtoken, const char *title, const u_char *buf, int size)"
.br
.ti -1c
.RI "char * \fBdump_snmpEngineID\fP (const u_char *buf, size_t *buflen)"
.br
.ti -1c
.RI "\fBmarker_t\fP \fBatime_newMarker\fP (void)"
.br
.RI "\fIcreate a new time marker. \fP"
.ti -1c
.RI "void \fBatime_setMarker\fP (\fBmarker_t\fP pm)"
.br
.RI "\fIset a time marker. \fP"
.ti -1c
.RI "long \fBatime_diff\fP (\fBmarker_t\fP first, \fBmarker_t\fP second)"
.br
.RI "\fIReturns the difference (in msec) between the two markers. \fP"
.ti -1c
.RI "u_long \fBuatime_diff\fP (\fBmarker_t\fP first, \fBmarker_t\fP second)"
.br
.RI "\fIReturns the difference (in u_long msec) between the two markers. \fP"
.ti -1c
.RI "u_long \fBuatime_hdiff\fP (\fBmarker_t\fP first, \fBmarker_t\fP second)"
.br
.RI "\fIReturns the difference (in u_long 1/100th secs) between the two markers (functionally this is what sysUpTime needs). \fP"
.ti -1c
.RI "int \fBatime_ready\fP (\fBmarker_t\fP pm, int deltaT)"
.br
.RI "\fITest: Has (marked time plus delta) exceeded current time (in msec) ? Returns 0 if test fails or cannot be tested (no marker). \fP"
.ti -1c
.RI "int \fBuatime_ready\fP (\fBmarker_t\fP pm, unsigned int deltaT)"
.br
.RI "\fITest: Has (marked time plus delta) exceeded current time (in msec) ? Returns 0 if test fails or cannot be tested (no marker). \fP"
.ti -1c
.RI "int \fBmarker_tticks\fP (\fBmarker_t\fP pm)"
.br
.RI "\fIReturn the number of timeTicks since the given marker. \fP"
.ti -1c
.RI "int \fBtimeval_tticks\fP (struct timeval *tv)"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define DIFFTIMEVAL(now, then, diff)"
.PP
\fBValue:\fP
.PP
.nf
{                                                   \
        now.tv_sec--;                                   \
        now.tv_usec += 1000000L;                        \
        diff.tv_sec  = now.tv_sec  - then.tv_sec;       \
        diff.tv_usec = now.tv_usec - then.tv_usec;      \
        if (diff.tv_usec > 1000000L){                   \
                diff.tv_usec -= 1000000L;               \
                diff.tv_sec++;                          \
        }                                               \
}
.fi
.PP
Definition at line 112 of file tools.h.
.SS "#define ISTRANSFORM(ttype, toid)"
.PP
\fBValue:\fP
.PP
.nf
!snmp_oid_compare(ttype, USM_LENGTH_OID_TRANSFORM,            \
                usm ## toid ## Protocol, USM_LENGTH_OID_TRANSFORM)
.fi
.PP
Definition at line 131 of file tools.h.
.SS "#define QUITFUN(e, l)"
.PP
\fBValue:\fP
.PP
.nf
if ( (e) != SNMPERR_SUCCESS) {   \
                rval = SNMPERR_GENERR;  \
                goto l ;                \
        }
.fi
.PP
Definition at line 99 of file tools.h.
.SS "#define SNMP_FREE(s)   if (s) { free((void *)s); s=NULL; }"
.PP
Frees a pointer only if it is !NULL and sets its value to NULL. 
.PP
Definition at line 53 of file tools.h.
.PP
Referenced by _sess_read(), build_oid_segment(), clear_callback(), clear_context(), clear_lookup_cache(), convert_v2pdu_to_v1(), create_user_from_session(), dump_chunk(), dump_registry(), fprint_description(), fprint_objid(), fprint_value(), fprint_variable(), free_agent_snmp_session(), get_module_node(), get_node(), get_set_cache(), init_mib(), netsnmp_addrcache_add(), netsnmp_agent_check_packet(), netsnmp_agent_check_parse(), netsnmp_config_remember_free_list(), netsnmp_deregister_agent_nsap(), netsnmp_fixup_mib_directory(), netsnmp_free_agent_request_info(), netsnmp_free_all_list_data(), netsnmp_free_cachemap(), netsnmp_free_delegated_cache(), netsnmp_free_list_data(), netsnmp_handler_dup(), netsnmp_handler_free(), netsnmp_handler_registration_free(), netsnmp_reassign_requests(), netsnmp_register_agent_nsap(), netsnmp_register_old_api(), netsnmp_sess_log_error(), netsnmp_set_mib_directory(), netsnmp_set_row_column(), netsnmp_sprint_realloc_objid(), netsnmp_sprint_realloc_objid_tree(), netsnmp_subtree_free(), netsnmp_subtree_join(), netsnmp_subtree_split(), netsnmp_table_build_oid_from_index(), netsnmp_table_data_delete_row(), netsnmp_table_data_set_helper_handler(), netsnmp_table_dataset_delete_data(), netsnmp_table_iterator_helper_handler(), netsnmp_wrap_up_request(), parse_octet_hint(), read_config_files(), read_objid(), shutdown_mib(), snmp_add_var(), snmp_free_pdu(), snmp_free_var(), snmp_sess_close(), snmp_unregister_callback(), snmpv3_make_report(), snmpv3_parse(), unregister_all_config_handlers(), unregister_config_handler(), and unregister_mibs_by_session().
.SS "#define SNMP_MALLOC_STRUCT(s)   (struct s *) calloc(1, sizeof(struct s))"
.PP
Mallocs memory of sizeof(struct s), zeros it and returns a pointer to it. 
.PP
Definition at line 60 of file tools.h.
.PP
Referenced by netsnmp_config_remember_in_list(), netsnmp_create_subtree_cache(), netsnmp_register_callback(), snmp_alarm_register(), and snmp_alarm_register_hr().
.SS "#define SNMP_MALLOC_TYPEDEF(td)   (td *) calloc(1, sizeof(td))"
.PP
Mallocs memory of sizeof(t), zeros it and returns a pointer to it. 
.PP
Definition at line 63 of file tools.h.
.PP
Referenced by add_subtree(), get_context_lookup_cache(), init_agent_snmp_session(), netsnmp_container_get_null(), netsnmp_container_iterator_get(), netsnmp_create_data_list(), netsnmp_create_delegated_cache(), netsnmp_create_handler(), netsnmp_create_handler_registration(), netsnmp_create_table_data(), netsnmp_create_table_data_row(), netsnmp_create_table_data_set(), netsnmp_create_watcher_info(), netsnmp_ds_register_config(), netsnmp_ds_register_premib(), netsnmp_get_cache_handler(), netsnmp_get_new_stash_cache(), netsnmp_get_or_add_local_cachid(), netsnmp_get_scalar_group_handler(), netsnmp_mark_row_column_writable(), netsnmp_mode_end_call_add_mode_callback(), netsnmp_oid_stash_create_sized_node(), netsnmp_old_api_helper(), netsnmp_register_auto_data_table(), netsnmp_register_loghandler(), netsnmp_register_mib_table_row(), netsnmp_register_old_api(), netsnmp_register_save_list(), netsnmp_register_table_data_set(), netsnmp_set_row_column(), netsnmp_table_container_register(), netsnmp_table_data_set_create_newrowstash(), netsnmp_table_data_set_helper_handler(), netsnmp_table_iterator_helper_handler(), netsnmp_table_set_add_default_row(), save_set_cache(), snmp_varlist_add_variable(), and table_helper_handler().
.SS "#define SNMP_MAX(a, b)   ((a) > (b) ? (a) : (b))"
.PP
Computers the maximum of a and b. 
.PP
Definition at line 77 of file tools.h.
.PP
Referenced by netsnmp_config_parse_table_set(), netsnmp_create_subtree_cache(), and netsnmp_register_table_data_set().
.SS "#define SNMP_MIN(a, b)   ((a) > (b) ? (b) : (a))"
.PP
Computers the minimum of a and b. 
.PP
Definition at line 81 of file tools.h.
.PP
Referenced by netsnmp_config_parse_table_set(), netsnmp_oid_find_prefix(), netsnmp_register_table_data_set(), netsnmp_scalar_group_helper_handler(), netsnmp_scalar_helper_handler(), and netsnmp_table_data_helper_handler().
.SH "Function Documentation"
.PP 
.SS "long atime_diff (\fBmarker_t\fP first, \fBmarker_t\fP second)"
.PP
Returns the difference (in msec) between the two markers. 
.PP
Definition at line 745 of file tools.c.
.PP
Referenced by atime_ready(), and marker_tticks().
.SS "\fBmarker_t\fP atime_newMarker (void)"
.PP
create a new time marker. 
.PP
NOTE: Caller must free time marker when no longer needed.
.PP
Definition at line 721 of file tools.c.
.PP
Referenced by atime_ready(), marker_tticks(), netsnmp_cache_helper_handler(), netsnmp_stash_cache_update(), and uatime_ready().
.SS "int atime_ready (\fBmarker_t\fP pm, int deltaT)"
.PP
Test: Has (marked time plus delta) exceeded current time (in msec) ? Returns 0 if test fails or cannot be tested (no marker). 
.PP
Definition at line 800 of file tools.c.
.PP
References atime_diff(), and atime_newMarker().
.PP
Referenced by netsnmp_cache_helper_handler(), netsnmp_stash_cache_update(), and release_cached_resources().
.SS "void atime_setMarker (\fBmarker_t\fP pm)"
.PP
set a time marker. 
.PP
Definition at line 732 of file tools.c.
.PP
Referenced by netsnmp_cache_helper_handler(), and netsnmp_stash_cache_update().
.SS "u_int binary_to_hex (const u_char * input, size_t len, char ** output)"
.PP
converts binary to hexidecimal 
.PP
\fBParameters:\fP
.RS 4
\fI*input\fP Binary data. 
.br
\fIlen\fP Length of binary data. 
.br
\fI**output\fP NULL terminated string equivalent in hex.
.RE
.PP
\fBReturns:\fP
.RS 4
olen Length of output string not including NULL terminator.
.RE
.PP
FIX Is there already one of these in the UCD SNMP codebase? The old one should be used, or this one should be moved to snmplib/snmp_api.c.
.PP
Definition at line 287 of file tools.c.
.PP
References VAL2HEX.
.PP
Referenced by dump_chunk().
.SS "void free_zero (void * buf, size_t size)"
.PP
zeros memory before freeing it. 
.PP
\fBParameters:\fP
.RS 4
\fI*buf\fP Pointer at bytes to free. 
.br
\fIsize\fP Number of bytes in buf.
.RE
.PP

.PP
Definition at line 185 of file tools.c.
.PP
Referenced by hex_to_binary2(), and malloc_random().
.SS "int hex_to_binary2 (const u_char * input, size_t len, char ** output)"
.PP
hex_to_binary2 
.PP
\fBParameters:\fP
.RS 4
\fI*input\fP Printable data in base16. 
.br
\fIlen\fP Length in bytes of data. 
.br
\fI**output\fP Binary data equivalent to input.
.RE
.PP
\fBReturns:\fP
.RS 4
SNMPERR_GENERR on failure, otherwise length of allocated string.
.RE
.PP
Input of an odd length is right aligned.
.PP
FIX Another version of 'hex-to-binary' which takes odd length input strings. It also allocates the memory to hold the binary data. Should be integrated with the official hex_to_binary() function.
.PP
Definition at line 324 of file tools.c.
.PP
References free_zero(), HEX2VAL, and NULL.
.SS "u_char* malloc_random (size_t * size)"
.PP
Returns pointer to allocaed & set buffer on success, size contains number of random bytes filled. 
.PP
buf is NULL and *size set to KMT error value upon failure.
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP Number of bytes to malloc() and fill with random bytes.
.RE
.PP
\fBReturns:\fP
.RS 4
a malloced buffer
.RE
.PP

.PP
Definition at line 205 of file tools.c.
.PP
References free_zero(), and NULL.
.SS "int marker_tticks (\fBmarker_t\fP pm)"
.PP
Return the number of timeTicks since the given marker. 
.PP
Definition at line 848 of file tools.c.
.PP
References atime_diff(), and atime_newMarker().
.PP
Referenced by timeval_tticks().
.SS "int memdup (u_char ** to, const u_char * from, size_t size)"
.PP
Duplicates a memory block. 
.PP
Copies a existing memory location from a pointer to another, newly malloced, pointer.
.PP
\fBParameters:\fP
.RS 4
\fIto\fP Pointer to allocate and copy memory to. 
.br
\fIfrom\fP Pointer to copy memory from. 
.br
\fIsize\fP Size of the data to be copied.
.RE
.PP
\fBReturns:\fP
.RS 4
SNMPERR_SUCCESS on success, SNMPERR_GENERR on failure.
.RE
.PP

.PP
Definition at line 236 of file tools.c.
.PP
References NULL.
.PP
Referenced by convert_v2pdu_to_v1(), create_user_from_session(), netsnmp_create_handler_registration(), netsnmp_handler_registration_dup(), netsnmp_instance_int_handler(), netsnmp_instance_long_handler(), netsnmp_instance_ulong_handler(), netsnmp_register_old_api(), netsnmp_set_row_column(), netsnmp_table_data_clone_row(), netsnmp_table_data_set_clone_row(), netsnmp_table_set_add_default_row(), and netsnmp_watcher_helper_handler().
.SS "char* netsnmp_strdup_and_null (const u_char * from, size_t from_len)"
.PP
copies a (possible) unterminated string of a given length into a new buffer and null terminates it as well (new buffer MAY be one byte longer to account for this 
.PP
Definition at line 255 of file tools.c.
.PP
References NULL.
.PP
Referenced by netsnmp_table_data_set_helper_handler().
.SS "int snmp_realloc (u_char ** buf, size_t * buf_len)"
.PP
This function increase the size of the buffer pointed at by *buf, which is initially of size *buf_len. 
.PP
Contents are preserved **AT THE BOTTOM END OF THE BUFFER**. If memory can be (re-)allocated then it returns 1, else it returns 0.
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP pointer to a buffer pointer 
.br
\fIbuf_len\fP pointer to current size of buffer in bytes
.RE
.PP

.PP
Definition at line 115 of file tools.c.
.PP
References NULL.
.PP
Referenced by asn_realloc(), dump_realloc_oid_to_string(), snmp_add_var(), snmp_decimal_to_binary(), snmp_hex_to_binary(), snmp_strcat(), sprint_realloc_asciistring(), sprint_realloc_hexstring(), sprint_realloc_ipaddress(), sprint_realloc_networkaddress(), and sprint_realloc_octet_string().
.SS "u_long uatime_diff (\fBmarker_t\fP first, \fBmarker_t\fP second)"
.PP
Returns the difference (in u_long msec) between the two markers. 
.PP
Definition at line 762 of file tools.c.
.PP
Referenced by uatime_ready().
.SS "u_long uatime_hdiff (\fBmarker_t\fP first, \fBmarker_t\fP second)"
.PP
Returns the difference (in u_long 1/100th secs) between the two markers (functionally this is what sysUpTime needs). 
.PP
Definition at line 780 of file tools.c.
.PP
Referenced by netsnmp_marker_uptime().
.SS "int uatime_ready (\fBmarker_t\fP pm, unsigned int deltaT)"
.PP
Test: Has (marked time plus delta) exceeded current time (in msec) ? Returns 0 if test fails or cannot be tested (no marker). 
.PP
Definition at line 822 of file tools.c.
.PP
References atime_newMarker(), and uatime_diff().
