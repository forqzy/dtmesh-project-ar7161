export ENETDIR=$(TOPDIR)/linux/drivers/net/ag7100/
#
# This is the specific makefile for the intellus series.  It has dependancies for both
# the "common" build and the "jffs2" build.  This is unique for each board type, and
# must be configured for each board.
#

# To enable library optimization (removing unused object code from
# shared libraries) set BUILD_LIBRARYOPT to 'y' else 'n'
BUILD_LIBRARYOPT := y

ifeq ($(BUILD_CONFIG), _routing)
pb42fus_build: common_fusion iptables_build ebtables_build $(BUILD_TYPE)_build update_build 
else
pb42fus_build: common_fusion ebtables_build $(BUILD_TYPE)_build update_build
endif

ifeq ($(BUILD_WPA2),y) ##################################################
common_fusion: check_tftp rootfs_prep toolchain_build kernel_build \
	kernel_info redboot_fusion busybox_build inadyn_build wpa2 sar \
	cgi ntpclient dnsmasq rp-pppoe wireless_tools_fus
common_build: check_tftp rootfs_prep toolchain_build kernel_build \
	kernel_info redboot_build enet_build busybox_build inadyn_build wpa2 sar 

else ################################################################
common_fusion: check_tftp rootfs_prep toolchain_build kernel_build \
	kernel_info redboot_fusion busybox_build inadyn_build wsc_fus \
	fus_supplicant sar wireless_tools_fusion

common_build: check_tftp rootfs_prep toolchain_build kernel_build \
	kernel_info redboot_build busybox_build inadyn_build wsc \
	wpa_supplicant sar

endif ################################################################

iptables_build:
	@echo making iptables
	cd ../apps/iptables-1.3.8 && \
	$(MAKE) clean && \
	$(MAKE) KERNEL_DIR=$(KERNELPATH) && \
	$(TOOLPREFIX)strip iptables && \
	cp iptables $(INSTALL_ROOT)/sbin/iptables && \
	for m in $$(ls -1 extensions/libipt_*.so) ; do \
		$(TOOLPREFIX)strip $$m ; \
		cp $$m $(INSTALL_ROOT)/lib ; \
	done

ebtables_build:
	@echo making ebtables
	cd ../apps/ebtables-v2.0.8-2 && \
	$(MAKE) clean && \
	$(MAKE) KERNEL_INCLUDES=$(KERNELPATH)/include && \
	cp ebtables $(INSTALL_ROOT)/sbin/ebtables && \
	cp libebtc.so $(INSTALL_ROOT)/lib/libebtc.so && \
	cp extensions/*.so $(INSTALL_ROOT)/lib

# WIRELESSTOOLNAMES must agree with wlan/linux/tools/Makefile
WIRELESSTOOLNAMES := athstats athstatsclear 80211stats athkey athchans athctrl\
	athdebug 80211debug wlanconfig athcwm athampdutrc atrc \
	pktlogconf pktlogdump radartool
wireless_tools_fus:
	@echo making wireless_tools
	if test -n "$(WIRELESSTOOLS)"; then \
	cd ../apps/$(WIRELESSTOOLS); make clean; make; \
	cp -f $(WIRELESSTOOLSLIB) $(INSTALL_ROOT)/lib; \
	cp -f iwpriv $(INSTALL_ROOT)/sbin; \
	cp -f iwconfig $(INSTALL_ROOT)/sbin; \
	cp -f iwlist $(INSTALL_ROOT)/sbin; \
	cd $(TOPDIR)/wlan/linux/tools && rm $(TOPDIR)/wlan/linux/tools/wlanconfig; \
	make wlanconfig BUILD_STATIC=$(BUILD_STATIC); \
	cp -f wlanconfig $(INSTALL_ROOT)/sbin; \
	fi

cgi: 
	@echo making cgi;\
	cd ../wlan/linux/tools;\
	rm -rf cgiMain upload upgrade download uploadcfg;\
	make cgiMain; make upload; make upgrade; make download;make uploadcfg;

hostapd_fus: openssl
	if ( test -e ../apps/wpa/hostapd-0.4.8 ) then \
	cd ../apps/wpa/hostapd-0.4.8; cp -f defconfig.fus .config; make clean; make; \
	make PREFIX=$(INSTALL_ROOT)/sbin CONFIG_PATH=$(INSTALL_ROOT)/etc/ath DEFAULT_CFG=$(INSTALL_ROOT)/etc/ath/default install; \
	fi

ntpclient:
	if ( test -e ../apps/ntpclient-2007 ) then \
	@echo making ntp client ; \
	cd ../apps/ntpclient-2007 ; make clean ; make; \
	cp ntpclient $(INSTALL_ROOT)/usr/sbin; \
	cp rate.awk $(INSTALL_ROOT)/usr/sbin; \
	fi

dnsmasq:
	@echo making dnsmasq ; \
	cd ../apps/dnsmasq-2.50 ; \
	make DESTDIR=$(INSTALL_ROOT) BINDIR="/usr/sbin" install 

pppd:
	if ( test -e ../apps/ppp-2.4.5) then \
	echo making ppp ; \
	cd ../apps/ppp-2.4.5 ; \
	make clean ; \
	./configure; \
	make && cp pppd/pppd chat/chat pppd/plugins/rp-pppoe/pppoe-discovery  $(INSTALL_ROOT)/usr/sbin; \
	cp etc.ppp/options etc.ppp/chap-secrets  $(INSTALL_ROOT)/etc/ppp;\
	fi

rp-pppoe: pppd
	@echo making rp-pppoe ; \
	cd ../apps/rp-pppoe-3.10/src ; \
	./configure ac_cv_path_PPPD=/usr/sbin/pppd --disable-nls --disable-ipv6 \
		--host=mips-linux-uclibc --build=whatever --enable-plugin=../../ppp-2.4.5 ; \
	make ;\
	cp pppoe $(INSTALL_ROOT)/usr/sbin ;\
	cp pppoe-server $(INSTALL_ROOT)/usr/sbin ;\
	cp pppoe-sniff $(INSTALL_ROOT)/usr/sbin ;\
	cp pppoe-relay $(INSTALL_ROOT)/usr/sbin ;\
	cp ../scripts/pppoe-start $(INSTALL_ROOT)/usr/sbin ;\
	cp ../scripts/pppoe-stop $(INSTALL_ROOT)/usr/sbin ;\
	cp ../scripts/pppoe-connect $(INSTALL_ROOT)/usr/sbin ;\
	cp ../scripts/pppoe-setup $(INSTALL_ROOT)/usr/sbin ;\
	cp ../scripts/pppoe-status $(INSTALL_ROOT)/usr/sbin ;\
	cp ../scripts/pppoe-init $(INSTALL_ROOT)/usr/sbin ;\
	chmod +x $(INSTALL_ROOT)/usr/sbin/pppoe-* ;\
	mkdir $(INSTALL_ROOT)/etc/ppp $(INSTALL_ROOT)/etc/ppp/configs $(INSTALL_ROOT)/etc/ppp/plugins; \
	cp ../configs/pppoe.conf $(INSTALL_ROOT)/etc/ppp ; \
	cp ../configs/pap-secrets $(INSTALL_ROOT)/etc/ppp ; \
	cp ../configs/pppoe-server-options  $(INSTALL_ROOT)/etc/ppp ; \
	cp rp-pppoe.so $(INSTALL_ROOT)/etc/ppp/plugins ;\
	cd $(INSTALL_ROOT)/etc/ppp/ ; \
	ln -s /tmp/pppoe.conf pppoe.conf ; \
	ln -s /tmp/pap-secrets pap-secrets ;\
	ln -s /tmp/gsm-modem.chat chat/gsm-modem.chat;\
	ln -s /tmp/pppd.conf peers/pppd.conf
	
wsc_fus: hostapd_fus
	if (test -e ../apps/wpa/wsc/src/linux ) then \
	chmod -R 755 ../apps/wpa/wsc/src/lunux; \
	cd ../apps/wpa/wsc/src/linux; make clean; \
	make PREFIX=$(INSTALL_ROOT)/sbin CONFIG_PATH=$(INSTALL_ROOT)/etc/ath DEFAULT_CFG=$(INSTALL_ROOT)/etc/ath/default install; \
	fi

fus_supplicant:
	if (test -e ../apps/wpa/wpa_supplicant-0.5.5 ) then \
	cd ../apps/wpa/wpa_supplicant-0.5.5; cp -f defconfig.fus .config; make clean; \
    make; make PREFIX=$(INSTALL_ROOT)/sbin install; \
	fi
	
redboot_fusion:
	@echo making redboot...
	cd $(BOOTLOADERDIR) && make ja73pf_rom BOARD_TYPE=pb42
	cp $(BOOTLOADERDIR)/rom_bld/install/bin/redboot.rom $(IMAGEPATH)/redboot-ja73pf.rom
	cd $(BOOTLOADERDIR) && make ja73pf_ram BOARD_TYPE=pb42
	cp $(BOOTLOADERDIR)/ram_bld/install/bin/redboot.bin $(IMAGEPATH)/redboot-ja73pf.bin
	cd $(BOOTLOADERDIR) && make ja76pf_rom BOARD_TYPE=pb44
	cp $(BOOTLOADERDIR)/rom_bld/install/bin/redboot.rom $(IMAGEPATH)/redboot-ja76pf.rom
	cd $(BOOTLOADERDIR) && make ja76pf_ram BOARD_TYPE=pb44
	cp $(BOOTLOADERDIR)/ram_bld/install/bin/redboot.bin $(IMAGEPATH)/redboot-ja76pf.bin
	cd $(BOOTLOADERDIR) && make ja76pf2_rom BOARD_TYPE=pb44
	cp $(BOOTLOADERDIR)/rom_bld/install/bin/redboot.rom $(IMAGEPATH)/redboot-ja76pf2.rom
	cd $(BOOTLOADERDIR) && make ja76pf2_ram BOARD_TYPE=pb44
	cp $(BOOTLOADERDIR)/ram_bld/install/bin/redboot.bin $(IMAGEPATH)/redboot-ja76pf2.bin
	cd $(BOOTLOADERDIR) && make ja76pf2hx_rom BOARD_TYPE=pb44
	cp $(BOOTLOADERDIR)/rom_bld/install/bin/redboot.rom $(IMAGEPATH)/redboot-ja76pf2hx.rom
	cd $(BOOTLOADERDIR) && make ja76pf2hx_ram BOARD_TYPE=pb44
	cp $(BOOTLOADERDIR)/ram_bld/install/bin/redboot.bin $(IMAGEPATH)/redboot-ja76pf2hx.bin

uboot_fusion:
	@echo making uboot...
	cd $(BOOTLOADERDIR) && make pb42_config
	cd $(BOOTLOADERDIR) && make clean && make
	cp $(BOOTLOADERDIR)/u-boot.bin $(IMAGEPATH)

enet_build: 
	cd $(ENETDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(ENETDIR) modules
	test -d $(MODULEPATH) || mkdir -p $(MODULEPATH)
	cp $(ENETDIR)/ag7100_mod.ko $(MODULEPATH)


art_mod:
	@echo Making ART Module
	cd ../apps/art && make -f makefile.soc.linux.mips clean && \
        make -f makefile.soc.linux.mips hydra
	cp ../apps/art/modules/art.ko $(MODULEPATH)/art.ko


